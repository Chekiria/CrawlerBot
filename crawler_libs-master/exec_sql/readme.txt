Предварительная настройка:
- Создать файл Exec.ini и поместить его в папку exec_sql
- В файл Exec.ini заполнить данными

[SRVDATA]
srv_data_path = путь к файлу srvdata.json в jooble list path

[_имя базы данных_]
login = ****
pass = ****
server = xxx.jooble.com

# Если вы используете Production Prod DB - дополнительно добавьте в Exec.ini:
[Job]
login = ****
pass = ****


Создание объекта:
db_name(str, default=None)                                   - Подключаемся к казаной бд при создании объекта.
                                                             Отключение произойдёт при удалении объекта
config_file(str, default=Exec.ini в папке пакета)            - Путь к файлу с credentials

Пример:
from exec_sql import Exec
e = Exec(db_name="CrawlerTest")

Выполняем запросы к БД:
1) .exec() - Этот метод предназначен для выполнения запросов которые не возвращают результат
:sql            - запрос или файл с запросом, который будет выполнятся
:db_name        - если задано подключаемся к указаной БД при условии, что мы уже к ней уже не подключены. После
                выполнения запроса возвращается предыдущие соеденение (если такое было установлено при создании
                объекта класа, иначе - просто отключаемся)
:exec_size      - кол-во запросов исполняемых за 1 раз. Применяется в случае если в параметр sql был передан
                список запросов (к примеру 100500 inset into). По умолчанию - 100


2) .get_column() - Этот метод предназначен для выполнения запросов select, которые возвращают 1 колону. Возвращает
    результат в формате [ value1, value2, value3, value4 ]

:sql            - запрос или файл с запросом, который будет выполнятся
:db_name        - если задано подключаемся к указаной БД при условии, что мы уже к ней уже не подключены. После
                выполнения запроса возвращается предыдущие соеденение (если такое было установлено при создании
                объекта класа, иначе - просто отключаемся)
:func_cleaner   - если задано - функция применяется ко всем елементам, котороые были выбоаны запросом.
:fp             - если задано - записываем результат в файл.
:encoding       - кодировка, в которой необходимо записывать данные в файл
:duplicates     - допускать дубликаты в записях. По умолчанию True

3) .get_rows() - Этот метод предназначен для выполнения запросов select, которые возвращают несколько колонок.
    По умолчанию результат в формате [ (value1, value2), (value3, value4) ], если задан параметр as_dict, в формате -
    [ {col_name1: value, col_name2: value2}, {col_name1: value3, col_name2: value4} ]
:sql            - запрос или файл с запросом, который будет выполнятся
:db_name        - если задано подключаемся к указаной БД при условии, что мы уже к ней уже не подключены. После
                выполнения запроса возвращается предыдущие соеденение (если такое было установлено при создании
                объекта класа, иначе - просто отключаемся)
:as_dict        - вернуть результат в виде:
                [ {col_name1: value, col_name2: value2}, {col_name1: value3, col_name2: value4} ]
:func_cleaner   - если задано - функция применяется ко всем елементам, котороые были выбоаны запросом.
:fp             - если задано - записываем результат в файл
:encoding       - кодировка, в которой необходимо записывать данные в файл


К примеру:
from exec_sql import Exec

# Кейс 1
sql = "select top 200 * from c_project with(nolock)"
res = Exec().get_rows(sql=sql, db_name="CrawlerTest", func_cleaner=lambda x: x.lower().strip())
print(res)

# Кейс 2
sql = "select top 100 domain from info_project with(nolock)"
res = Exec().exec(sql=sql, db_name="CrawlerTest", func_cleaner=lambda x: x.lower().strip(), duplicates=False)
print(res)

# Кейс 3
# Создаём таблицу
sql = "create table some_test(some_value int)"
e.exec(sql=sql, db_name="DataRetrieval")

# Заполняем её
sql_list = ["insert into test_apl(some_value) values ({0})".format(i) for i in range(10000)]
e.exec(sql=sql_list, db_name="DataRetrieval")

